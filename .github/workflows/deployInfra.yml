name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/deployInfra.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  WORKING_DIR: './infra'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform init

    - name: Terraform Format
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform fmt

    - name: Terraform Validate
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform validate

    - name: Terraform Plan
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        terraform plan -out=tfplan \
          -var="resource_group_name=recursosLab03" \
          -var="sql_server_name=serverlab03" \
          -var="my_ip_address=38.250.158.179" \
          -var="environment=lab"

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.WORKING_DIR }}/tfplan

  terraform-apply:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.WORKING_DIR }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform init

    - name: Terraform Apply
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform apply -auto-approve tfplan

    - name: Show Outputs
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform output -json

  terraform-destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: production
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform init

    - name: Terraform Destroy
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        terraform destroy -auto-approve \
          -var="resource_group_name=recursosLab03" \
          -var="sql_server_name=serverlab03" \
          -var="my_ip_address=38.250.158.179" \
          -var="environment=lab"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [terraform-plan, terraform-apply]
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.terraform-apply.result == 'success'
      run: |
        echo "üéâ Infrastructure deployed successfully!"
        echo "üìä Created databases:"
        echo "  - modelo01_envios (Shipping model)"
        echo "  - modelo02_reservas (Travel reservations)"
        echo "  - modelo03_adicional (Additional model)"
        echo "üîó Server: serverlab03.database.windows.net"
        echo "‚úÖ Ready for SQL model deployment!"

    - name: Deployment Failed
      if: needs.terraform-apply.result == 'failure' || needs.terraform-plan.result == 'failure'
      run: |
        echo "‚ùå Infrastructure deployment failed!"
        echo "Check the logs above for details."
        exit 1